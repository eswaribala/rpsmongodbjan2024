use socialdb;
db.createCollection("users");
show collections
=============================
db.users.insertOne({
        "fname": "parameswari", 
        "lname": "bala",
        "dob": "1970-12-02",
        "email":"Parameswaribala@gmail.com",
        "password":"test@123",
        "gender":"female",
        "address":{
            "doorNo":"16",
            "streetName":"First Street",
            "city":"Chennai",
            "postalCode":602024
              },
        "phoneNo":9952032862      
        })
================================

 db.users.insertMany([{
        "fname": "Bala", 
        "lname": "Manickamuthu",
        "dob": "1965-04-27",
        "email":"bala@gmail.com",
        "password":"test@123",
        "gender":"male",
        "address":{
            "doorNo":"16",
            "streetName":"First Street",
            "city":"Chennai",
            "postalCode":602024
              },
        "phoneNo":8056050425   
        },
{
        "fname": "vignesh", 
        "lname": "bala",
        "dob": "1995-12-07",
        "email":"vignesh@gmail.com",
        "password":"test@123",
        "gender":"male",
        "address":{
            "doorNo":"16",
            "streetName":"First Street",
            "city":"Chennai",
            "postalCode":602024
              },
        "phoneNo":8056010299      
        },
{
        "fname": "hoshini", 
        "lname": "vignesh",
        "dob": "1999-01-31",
        "email":"hoshini@gmail.com",
        "password":"test@123",
        "gender":"female",
        "address":{
            "doorNo":"16",
            "streetName":"First Street",
            "city":"Chennai",
            "postalCode":602024
              },
        "phoneNo":9952032863      
        }
])
==============================
db.users.countDocuments()

db.users.distinct("lname");

db.users.countDocuments({"lname":"bala"});

db.users.countDocuments({"fname":"parameswari","lname":"bala"});

db.users.findOne({"fname":"parameswari","lname":"bala"});

db.users.find({"fname":"parameswari","lname":"bala"}).pretty();
db.users.find({"lname":"bala"}).pretty();
db.users.find( {age: { $gte: 50}}, {"fname": 1}).explain()
db.employees.find({"year":2018},{"name":"Bala"})

db.employees.find(
   { name: { $in: ["Bala","Vignesh"] } }
)
db.employees.find(
   { "name": { $regex: /^[A-Z][a-z]*$/ } }
)

db.users.find( { age: { $gt: 50, $lt: 65 } } )

db.users.find( {
   age: { $gt: 50 },
   fname : { $in: ["Bala"] }
} )
db.users.find( {
   age: { $gt: 50 },
   fname : { $exists: true }
} )

db.users.find().sort( { fname: 1 } )
db.employees.find().sort({name:1})

db.employees.find().limit( 2 )
db.employees.find().skip( 2 )

#3 records vignesh, Vignesh, VIGNESH
db.employees.find( { "name": "vignesh" } ).collation( { locale: "en_US", strength: 2 } )
# 1 record
db.employees.find( { "name": "vignesh" } )

db.employees.find( {
   name: {
      $not: {
         $eq: "Bala"
      }
   }
} )

=========================
db.users.updateOne({
    fname: "Bala"
}, {
    $set: {
        age: 52
    }
})
db.users.aggregate([
   { "$group": {
      "_id": null,
      "MaxAge": { "$max": "$age" },
      "MinAge": { "$min": "$age" }
   }}
])


db.users.aggregate([
   { "$group": {
      "_id": {"gender":"$gender"},
      "MaxAge": { "$max": "$age" },
      "MinAge": { "$min": "$age" }
   }}
])

db.users.updateOne({
    fname: "Bala"
}, {
    $min: {
        age: 52
    }
})

db.users.updateOne({
    fname: "Bala"
}, {
    $max: {
        age: 58
    }
})

db.users.updateMany(
   { },
   [
     { $set: { gender: { $switch: {
                           branches: [
                               { case: { $eq: [ "$gender", 'male' ] }, then: "female" },
                               { case: { $eq: [ "$gender", 'female' ] }, then: "male" }
                           ],
                           default: ""
     } } } }
   ]
)

 db.users.updateOne({ "fname":"Bala"  }, { $mul: { age: 1.2 } })



db.users.updateOne({fname: "Bala"}, {$inc: {"address.postalCode":10}}) 

db.users.updateMany({}, {$rename: {"address.postalCode":"address.postalcode"}})
===========================================
db.users.deleteOne({"fname": "Bala"})
db.users.deleteMany( { fname: { $in: [ "Parameswari", "Bala" ] } } )
===============================================================
Embedded Document
{
    _id: ObjectId("32521df3f4948bd2f54218"),
    firstName: "John",
    lastName: "King",
    department: { 
                _id: ObjectId("55214df3f4948bd2f8753"), 
                name:"Finance"
            },
    address: {
        phone: { type: "Home", number: "111-000-000" }
    }
}

Array
{
    _id: ObjectId("32521df3f4948bd2f54218"),
    firstName: "John",
    lastName: "King",
    email: "john.king@abc.com",
    skills: [ "Angular", "React", "MongoDB" ],
}
===================================================
Array operators

use employeesdb;

db.createCollection("employees", { 
   validator: { 
      $jsonSchema: { 
         bsonType: ["object"], 
         required: [ "name", "year", "skills", "address" ], 
         properties: { 
            name: { 
               bsonType: ["string"], 
               description: "must be a string and is required" 
            }, 
            year: { 
               bsonType: ["int"], 
               minimum: 2017, 
               maximum: 2021, 
               description: "must be an integer in [ 2017, 2021] and is required" 
            }, 
            skills: { 
               bsonType:["array"],
               minItems: 1,              
               description: "can only be one of the enum values and is required" 
            }, 
            salary: { 
               bsonType: [ "int" ], 
               description: "must be a double if the field exists" 
            }, 
            address: { 
               bsonType: ["object"], 
               required: [ "city" ], 
               properties: { 
                  street: { 
                     bsonType: ["string"], 
                     description: "must be a string if the field exists" 
                  }, 
                  city: { 
                     bsonType: ["string"],
                      enum: [ "chennai", "bangalore", "pune", null ],  
                     description: "must be a string and is required" 
                  } 
               } 
            } 
         } 
      } 
   } 
})

#to view the schema
db.getCollectionInfos();


db.employees.insertOne({
"name":"Parameswari",
"year":2018,
"skills":["Mongodb","React"],
"salary": 400000,
"address":{
"street":"Gandhi Street",
"city":"chennai"
 }

})

db.employees.insertOne({
"name":"Bala",
"year":2019,
"skills":["Mongodb","React","Javascript"],
"salary": 400000,
"address":{
"street":"Gandhi Street",
"city":"bangalore"
 }

})
db.employees.find ({"address.city": {$all: ['chennai']}})

db.employees.find ({"skills": {$all: ['Mongodb']}})

db.employees.find ({"skills": {$all: ['Javascript']}})
db.employees.find({"skills": {$elemMatch: {$eq: "React", $eq:"Mongodb"}}})
db.employees.find ({"skills": {$size: 3}});

====================================================
db.employees.getIndexes()
db.employees.createIndex({name:1})#multi key index

#ttl index 
db.employees.createIndex( { "salary": 1 }, 
{ expireAfterSeconds: 1 } )

db.employees.find({"year":2018}).explain();


#db.adminCommand({getParameter:1, ttlMonitorSleepSecs: 1});



#drop index by index name
db.employees.dropIndex("name_1")
#unique index
db.employees.createIndex( { "name": 1 }, { unique: true } )
#multiple field index
db.employees.createIndex( { name: 1, salary: 1, year: 1 },
 { unique: 1 } )



partial index
the following operation creates a compound index that 
indexes only the documents with a salary field greater than 200000.

db.employees.createIndex(
   { name: 1, salary: 1 },
   { partialFilterExpression: { salary: { $gt: 100000 } } }
)

db.employees.createIndex( { "name": 1},
   { collation: { locale: "en", strength: 2 } })
db.employees.find({name:"vignesh"})/// does not use index, finds one result
#uses index and finds 3 documents
db.employees.find( { name: "vignesh" } ).collation( { locale: 'en', strength: 2 } )

db.employees.insertOne({
"name":"vignesh",
"year":2020,
"skills":["Mongodb","React","Javascript"],
"salary": 400000,
"address":{
"street":"Gandhi Street",
"city":"bangalore"
 }

})
db.employees.insertOne({
"name":"Vignesh",
"year":2020,
"skills":["Mongodb","React","Javascript"],
"salary": 400000,
"address":{
"street":"Gandhi Street",
"city":"bangalore"
 }

})
db.employees.insertOne({
"name":"VIGNESH",
"year":2020,
"skills":["Mongodb","React","Javascript"],
"salary": 400000,
"address":{
"street":"Gandhi Street",
"city":"bangalore"
 }

})


db.employees.find( { name: "vignesh" } ) #3

*/
Ascending and Descending index
db.employees.createIndex( { name: 1, year: -1 } )


sparse index
db.employees.createIndex( { "skills": 1 }, { sparse: true } )
The index does not index documents that do not include 
the skills field.
=========================================================================

db.employees.deleteOne({"name":"vignesh"})
db.employees.deleteMany( { "year": 2020} )

db.employees.drop()
=====================================================
 
docker cp "F:\Local disk\MongoDB\lab\mongodb-labs-master\mongodb-labs-master\exercises\Salary Data.csv" ltimongo:/data

mongoimport --db employeesdb --collection salaries  --type csv --headerline --file "./data/Salary Data.csv"

Aggregation

db.salaries.aggregate([
   { "$group": {
      "_id": {"gender":"$Gender"},
      "MaxSalary": { "$max": "$Salary" },
      "MinSalary": { "$min": "$Salary" }
   }}
])

db.salaries.aggregate([
   { "$group": {
      "_id": {"gender":"$Gender"},
      "Total": { "$sum": "$Salary" }
     
   }}
])

db.salaries.aggregate([
   { "$group": {
      "_id": null,
      "GrandTotal": { "$sum": "$Salary" }
     
   }}
])

#counting no of male and female
db.salaries.aggregate([
    {$group: 
        {_id : "$Gender", 
        count : {$sum: 1}
        }
    }
])

db.salaries.aggregate([
    {$group:
        {_id:{"Gender":"$Gender",     
        "Years of Experience":"$Years of Experience"}, 
        EmployeesCount:{$sum:1}
        }
    }
])

db.salaries.aggregate([
    {$match: 
        {Gender:{$ne: null}}
    },
    {$group:
        {_id : "$Gender", 
        TotalCount : {$sum: 1}
        }
    }
])


db.salaries.aggregate([
   {$match: 
        {Gender:{$ne: null}}
    },
   { "$group": {
      "_id": {"gender":"$Gender"},
      "MaxSalary": { "$max": "$Salary" },
      "MinSalary": { "$min": "$Salary" }
   }}
])

db.salaries.aggregate([
{$match: 
        {Gender:{$ne: null}}
    },
    {$group: 
        {_id : "$Gender", 
        count : {$sum: 1}
        }
    },
   {
    $sort:
     {_id:1}
   }

])

db.salaries.find({"Gender":null})

#unwind groups the documents by checking automatically null, empty and missing fields
db.salaries.aggregate([
    {$unwind: "$Job Title"}, 
    {$group:
        {_id:{Salary:"$Salary"}, 
        numberOfJobTitles:{$sum:1}
        }
    }
])


db.salaries.aggregate([
    {$unwind: "$Gender"},
    {$match: 
        {Age: {$gte: 28}}
    },
    {$group: 
        {_id: {Salary: "$Salary"}, 
        numberOfEmployees: {$sum:1}
        }
    }
])



====================
curl -X POST 'https://realm.mongodb.com/api/client/v2.0/app/data-wezec/auth/providers/local-userpass/login' --header 'Content-Type: application/json' --data-raw '{
  "username": "parameswari.ettiappan@outlook.com",
  "password": "Vigneshbala@95!"
}'

Data API
curl --location --request POST 'https://ap-south-1.aws.data.mongodb-api.com/app/data-wezec/endpoint/data/v1/action/findOne' `
--header 'Content-Type: application/json' `
--header 'Access-Control-Request-Headers: *' `
--header 'api-key: UyBrf9Zv19yugA8Si76WNqLB56DUz6kxXSn3yBrS82bdCPealVFP0ByUnFt0xzZF' `
--data-raw '{
    "collection":"salaries",
    "database":"employees",
    "dataSource":"Cluster0",
    "projection": {"_id": 1}
}'

